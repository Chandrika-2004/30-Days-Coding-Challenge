Q : Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Sol :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
            if(root == NULL) {
                return true;
            }
        return ismirror( root->left, root->right);
        
    }

    bool ismirror(TreeNode* left, TreeNode* right) {
                if(left == NULL && right == NULL) {
                    return true;
                }

                if(left == NULL or right == NULL) {
                    return false;
                }

                
                return left->val == right->val &&  ismirror(left->left, right->right) && ismirror(left->right, right->left);
                

    }
};
