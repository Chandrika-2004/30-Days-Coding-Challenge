Q : Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed
based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".
One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full,
we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.


Sol :

class MyCircularQueue {
public:
    vector<int> arr;
    int front, rear, size, count;

    MyCircularQueue(int k) {
        arr.resize(k);
        front = 0;
        rear = -1;
        count = 0;
        size = k;    
    }
    
    bool enQueue(int value) {
        if(isFull()){
            return false;
        }
        rear = (rear + 1) % size;
        arr[rear] = value;
        count++;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
        front = (front + 1) % size;
        count--;
        return true;        
    }
    
    int Front() {
        if(isEmpty()) return -1;
        return arr[front];
    }
    
    int Rear() {
        if(isEmpty()) return -1;
        return arr[rear];
    }
    
    bool isEmpty() {
        return count == 0;
    }
    
    bool isFull() {
        return count == size;
    }
};

