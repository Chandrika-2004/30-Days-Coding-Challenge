 Q.  Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)



Sol:

class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next: return head
        dummy = ListNode(0)
        dummy.next = head
        curr = dummy
        while curr.next and curr.next.next:
            fir= curr.next
            sec= curr.next.next
            curr.next = sec
            fir.next = sec.next
            sec.next = fir
            curr = curr.next.next
    
        return dummy.next
